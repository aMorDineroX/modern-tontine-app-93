#!/bin/bash

# Script pour surveiller les performances de l'application
# Utilisation: ./monitor-performance.sh [options]
# Options:
#   --url=<url>: URL √† surveiller (par d√©faut: http://localhost:5173)
#   --runs=<nombre>: Nombre d'ex√©cutions (par d√©faut: 3)
#   --device=<mobile|desktop>: Type d'appareil √† simuler (par d√©faut: desktop)

# Se placer √† la racine du projet
cd "$(dirname "$0")/.."

# Analyser les arguments
URL="http://localhost:5173"
RUNS=3
DEVICE="desktop"

for arg in "$@"; do
  case $arg in
    --url=*)
      URL="${arg#*=}"
      shift
      ;;
    --runs=*)
      RUNS="${arg#*=}"
      shift
      ;;
    --device=*)
      DEVICE="${arg#*=}"
      shift
      ;;
  esac
done

# V√©rifier si Lighthouse est install√©
if ! command -v lighthouse &> /dev/null; then
    echo "Lighthouse n'est pas install√©. Installation en cours..."
    npm install -g lighthouse
fi

# Cr√©er le dossier de rapports s'il n'existe pas
mkdir -p reports/performance

# Date pour les noms de fichiers
DATE=$(date +"%Y%m%d_%H%M%S")

# Fonction pour ex√©cuter Lighthouse
run_lighthouse() {
  echo "üîç Analyse des performances avec Lighthouse..."
  
  LIGHTHOUSE_OPTIONS="--output=json --output=html --quiet"
  
  if [ "$DEVICE" = "mobile" ]; then
    LIGHTHOUSE_OPTIONS="$LIGHTHOUSE_OPTIONS --emulated-form-factor=mobile"
  else
    LIGHTHOUSE_OPTIONS="$LIGHTHOUSE_OPTIONS --emulated-form-factor=desktop"
  fi
  
  # Ex√©cuter Lighthouse plusieurs fois et calculer la moyenne
  for (( i=1; i<=$RUNS; i++ )); do
    echo "Ex√©cution $i sur $RUNS..."
    
    REPORT_PREFIX="reports/performance/lighthouse-$DEVICE-run$i-$DATE"
    
    lighthouse "$URL" $LIGHTHOUSE_OPTIONS --output-path="$REPORT_PREFIX"
    
    # Extraire les scores
    PERFORMANCE=$(cat "$REPORT_PREFIX.report.json" | jq '.categories.performance.score * 100')
    ACCESSIBILITY=$(cat "$REPORT_PREFIX.report.json" | jq '.categories.accessibility.score * 100')
    BEST_PRACTICES=$(cat "$REPORT_PREFIX.report.json" | jq '.categories["best-practices"].score * 100')
    SEO=$(cat "$REPORT_PREFIX.report.json" | jq '.categories.seo.score * 100')
    
    echo "Performance: $PERFORMANCE"
    echo "Accessibilit√©: $ACCESSIBILITY"
    echo "Bonnes pratiques: $BEST_PRACTICES"
    echo "SEO: $SEO"
    echo ""
    
    # Ajouter les scores au fichier CSV
    if [ $i -eq 1 ]; then
      echo "Run,Performance,Accessibility,Best Practices,SEO" > "reports/performance/scores-$DEVICE-$DATE.csv"
    fi
    
    echo "$i,$PERFORMANCE,$ACCESSIBILITY,$BEST_PRACTICES,$SEO" >> "reports/performance/scores-$DEVICE-$DATE.csv"
  done
  
  # Calculer les moyennes
  PERFORMANCE_AVG=$(awk -F, 'NR>1 {sum+=$2} END {print sum/(NR-1)}' "reports/performance/scores-$DEVICE-$DATE.csv")
  ACCESSIBILITY_AVG=$(awk -F, 'NR>1 {sum+=$3} END {print sum/(NR-1)}' "reports/performance/scores-$DEVICE-$DATE.csv")
  BEST_PRACTICES_AVG=$(awk -F, 'NR>1 {sum+=$4} END {print sum/(NR-1)}' "reports/performance/scores-$DEVICE-$DATE.csv")
  SEO_AVG=$(awk -F, 'NR>1 {sum+=$5} END {print sum/(NR-1)}' "reports/performance/scores-$DEVICE-$DATE.csv")
  
  echo "Moyennes sur $RUNS ex√©cutions:"
  echo "Performance: $PERFORMANCE_AVG"
  echo "Accessibilit√©: $ACCESSIBILITY_AVG"
  echo "Bonnes pratiques: $BEST_PRACTICES_AVG"
  echo "SEO: $SEO_AVG"
  
  # Ajouter les moyennes au fichier CSV
  echo "Average,$PERFORMANCE_AVG,$ACCESSIBILITY_AVG,$BEST_PRACTICES_AVG,$SEO_AVG" >> "reports/performance/scores-$DEVICE-$DATE.csv"
  
  echo "Rapports g√©n√©r√©s dans le dossier reports/performance"
}

# Fonction pour ex√©cuter WebPageTest
run_webpagetest() {
  echo "üîç Analyse des performances avec WebPageTest..."
  
  if ! command -v webpagetest &> /dev/null; then
    echo "WebPageTest CLI n'est pas install√©. Installation en cours..."
    npm install -g webpagetest
  fi
  
  # V√©rifier si la cl√© API est d√©finie
  if [ -z "$WPT_API_KEY" ]; then
    echo "‚ö†Ô∏è La cl√© API WebPageTest n'est pas d√©finie. Veuillez d√©finir la variable d'environnement WPT_API_KEY."
    return
  fi
  
  DEVICE_PARAM=""
  if [ "$DEVICE" = "mobile" ]; then
    DEVICE_PARAM="--mobile"
  fi
  
  webpagetest test "$URL" --key "$WPT_API_KEY" $DEVICE_PARAM --location "ec2-us-east-1:Chrome" --runs "$RUNS" --first --timeline --netlog --lighthouse --video --save "reports/performance/webpagetest-$DEVICE-$DATE.json"
  
  echo "Rapport WebPageTest g√©n√©r√©: reports/performance/webpagetest-$DEVICE-$DATE.json"
}

# Fonction pour ex√©cuter React Profiler
run_react_profiler() {
  echo "üîç Analyse des performances avec React Profiler..."
  
  echo "Pour utiliser React Profiler:"
  echo "1. Ouvrez l'application dans Chrome"
  echo "2. Ouvrez les outils de d√©veloppement (F12)"
  echo "3. Allez dans l'onglet 'Profiler'"
  echo "4. Cliquez sur 'Start profiling and reload page'"
  echo "5. Interagissez avec l'application"
  echo "6. Cliquez sur 'Stop'"
  echo "7. Analysez les r√©sultats"
  echo "8. Exportez les r√©sultats en cliquant sur 'Save profile...'"
  
  echo "Vous pouvez √©galement utiliser React DevTools Profiler pour une analyse plus d√©taill√©e."
}

# V√©rifier si l'application est en cours d'ex√©cution
if ! curl -s "$URL" > /dev/null; then
  echo "‚ö†Ô∏è L'application n'est pas accessible √† l'URL $URL."
  echo "Veuillez d√©marrer l'application avec 'npm run dev' et r√©essayer."
  exit 1
fi

# Ex√©cuter les analyses
echo "üöÄ D√©marrage de l'analyse des performances..."
echo "URL: $URL"
echo "Appareil: $DEVICE"
echo "Nombre d'ex√©cutions: $RUNS"
echo ""

run_lighthouse
# run_webpagetest  # N√©cessite une cl√© API
run_react_profiler

echo "‚úÖ Analyse des performances termin√©e. Consultez les rapports dans le dossier 'reports/performance'."
