#!/usr/bin/env node

/**
 * Script pour corriger les probl√®mes de base de donn√©es Supabase
 * Version simplifi√©e qui utilise des requ√™tes SQL directes
 * 
 * Usage: node scripts/fix-database-simple.js
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import chalk from 'chalk';

// Charger les variables d'environnement
dotenv.config();

// Utiliser les variables d'environnement ou les valeurs par d√©faut
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://zctvkxwnrhxdiuzuptof.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpjdHZreHducmh4ZGl1enVwdG9mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1ODEwNzksImV4cCI6MjA2MDE1NzA3OX0.-p1ROiRCbrNvlCZe3IO1CR8PVkkseFDcSbqn3d2DZA8';

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Fonction pour cr√©er un utilisateur de test
async function createTestUser() {
  console.log(chalk.blue('üîÑ Cr√©ation d\'un utilisateur de test...'));
  
  try {
    // Cr√©er l'utilisateur
    const { data, error } = await supabase.auth.signUp({
      email: 'test@example.com',
      password: 'password123'
    });
    
    if (error) {
      if (error.message.includes('already exists')) {
        console.log(chalk.green('‚úÖ L\'utilisateur de test existe d√©j√†'));
      } else {
        console.error(chalk.red('‚ùå Erreur lors de la cr√©ation de l\'utilisateur de test:'), error);
      }
      return;
    }
    
    console.log(chalk.green('‚úÖ Utilisateur de test cr√©√© avec succ√®s'));
    console.log(chalk.gray('ID utilisateur:'), data.user.id);
    
    // Cr√©er le profil associ√©
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: data.user.id,
        full_name: 'Test User',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    
    if (profileError) {
      console.error(chalk.red('‚ùå Erreur lors de la cr√©ation du profil de test:'), profileError);
      return;
    }
    
    console.log(chalk.green('‚úÖ Profil de test cr√©√© avec succ√®s'));
    
    // Ajouter le r√¥le utilisateur
    const { error: roleError } = await supabase
      .from('user_roles')
      .insert({
        user_id: data.user.id,
        role: 'user',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    
    if (roleError) {
      console.error(chalk.red('‚ùå Erreur lors de l\'ajout du r√¥le utilisateur:'), roleError);
      return;
    }
    
    console.log(chalk.green('‚úÖ R√¥le utilisateur ajout√© avec succ√®s'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå Erreur lors de la cr√©ation de l\'utilisateur de test:'), error);
  }
}

// Fonction pour corriger les politiques RLS
async function fixRlsPolicies() {
  console.log(chalk.blue('üîÑ Correction des politiques RLS...'));
  
  // Liste des tables √† corriger
  const tables = [
    'tontine_groups',
    'group_members',
    'contributions',
    'payouts',
    'messages'
  ];
  
  for (const table of tables) {
    console.log(chalk.gray(`V√©rification de la table '${table}'...`));
    
    try {
      // V√©rifier si la table existe
      const { count, error: countError } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (countError) {
        console.log(chalk.yellow(`‚ö†Ô∏è Impossible d'acc√©der √† la table '${table}': ${countError.message}`));
        console.log(chalk.gray('Tentative d\'ajout d\'une politique de s√©curit√© publique...'));
        
        // Essayer d'ajouter une politique publique
        const { data, error } = await supabase.rpc('add_public_policy', { table_name: table });
        
        if (error) {
          console.error(chalk.red(`‚ùå Erreur lors de l'ajout de la politique pour '${table}': ${error.message}`));
        } else {
          console.log(chalk.green(`‚úÖ Politique publique ajout√©e pour la table '${table}'`));
        }
      } else {
        console.log(chalk.green(`‚úÖ Table '${table}' accessible: ${count} lignes`));
      }
    } catch (error) {
      console.error(chalk.red(`‚ùå Erreur lors de la v√©rification de la table '${table}':`, error));
    }
  }
}

// Fonction pour cr√©er la fonction has_role
async function createHasRoleFunction() {
  console.log(chalk.blue('üîÑ Cr√©ation de la fonction has_role...'));
  
  try {
    // V√©rifier si la fonction existe d√©j√†
    const { data, error } = await supabase.rpc('has_role', { role: 'user' });
    
    if (!error || !error.message.includes('has_role')) {
      console.log(chalk.green('‚úÖ La fonction has_role existe d√©j√†'));
      return;
    }
    
    console.log(chalk.yellow('‚ö†Ô∏è La fonction has_role n\'existe pas, tentative de cr√©ation...'));
    
    // Cr√©er la fonction has_role via une fonction d'aide
    const { data: createData, error: createError } = await supabase.rpc('create_has_role_function');
    
    if (createError) {
      console.error(chalk.red('‚ùå Erreur lors de la cr√©ation de la fonction has_role:'), createError);
      
      // Essayer une approche alternative
      console.log(chalk.gray('Tentative alternative...'));
      
      // Cr√©er une fonction d'aide pour cr√©er has_role
      const { data: helperData, error: helperError } = await supabase.rpc('create_helper_function');
      
      if (helperError) {
        console.error(chalk.red('‚ùå Erreur lors de la cr√©ation de la fonction d\'aide:'), helperError);
        return;
      }
      
      // Utiliser la fonction d'aide pour cr√©er has_role
      const { data: retryData, error: retryError } = await supabase.rpc('create_has_role_function');
      
      if (retryError) {
        console.error(chalk.red('‚ùå Erreur lors de la seconde tentative:'), retryError);
        return;
      }
    }
    
    console.log(chalk.green('‚úÖ Fonction has_role cr√©√©e avec succ√®s'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå Erreur lors de la cr√©ation de la fonction has_role:'), error);
  }
}

// Fonction pour se connecter avec l'utilisateur de test
async function testLogin() {
  console.log(chalk.blue('üîÑ Test de connexion avec l\'utilisateur de test...'));
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'test@example.com',
      password: 'password123'
    });
    
    if (error) {
      console.log(chalk.yellow('‚ö†Ô∏è Impossible de se connecter avec l\'utilisateur de test:'), error.message);
      return false;
    }
    
    console.log(chalk.green('‚úÖ Connexion r√©ussie avec l\'utilisateur de test'));
    console.log(chalk.gray('Session:'), data.session ? 'Valide' : 'Invalide');
    
    return true;
  } catch (error) {
    console.error(chalk.red('‚ùå Erreur lors du test de connexion:'), error);
    return false;
  }
}

// Fonction principale
async function main() {
  console.log(chalk.blue.bold('üîß Correction des probl√®mes de base de donn√©es Supabase\n'));
  console.log(chalk.gray(`URL Supabase: ${supabaseUrl}`));
  
  // Cr√©er un utilisateur de test
  await createTestUser();
  
  // Tester la connexion
  const loginSuccess = await testLogin();
  
  if (loginSuccess) {
    // Corriger les politiques RLS
    await fixRlsPolicies();
    
    // Cr√©er la fonction has_role
    await createHasRoleFunction();
  }
  
  console.log(chalk.green.bold('\n‚úÖ Corrections termin√©es!'));
  console.log(chalk.green('Ex√©cutez maintenant le script de test pour v√©rifier les corrections:'));
  console.log(chalk.gray('  node scripts/test-app.js'));
}

// Ex√©cuter la fonction principale
main()
  .catch(error => {
    console.error(chalk.red('‚ùå Erreur non g√©r√©e:'), error);
    process.exit(1);
  });
